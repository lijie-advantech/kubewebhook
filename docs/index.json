[
{
	"uri": "https://slok.github.io/kubewebhook/getting-started/basic-concepts/",
	"title": "Basic concepts",
	"tags": [],
	"description": "",
	"content": " Basic concepts Kubewebhooks embreces simplicity that\u0026rsquo;s why there are very few components that are required, a webhook server is made up of a server and one or more webhooks.\nWebhooks There are two types of webhooks, Validating and Mutating, they are valid Webhook interface implementation.\nValidating webhooks These webhooks only validate the received object, a Validating webhook is made up of a Validator interface, this interface only validates an metav1.Object.\nValidating webhooks are with admissionregistration.k8s.io/v1beta1/ValidatingWebhookConfiguration Kubernetes resource\nA Validator can act also as a validator chain, Check validating.Chain Mutating webhooks Mutating webhooks are similar to validating webhooks but instead of validating the object it modifies (mutate) them. A Mutating webhook is made up of Mutator interface.\nMutating webhooks are with admissionregistration.k8s.io/v1beta1/MutatingWebhookConfiguration Kubernetes resource\nA Mutator can act also as a mutator chain, Check mutating.Chain HTTP Handler Kubewebhook focuses on the Kubernetes webhooks itself, it doesn\u0026rsquo;t try to manage the http server, that\u0026rsquo;s why it will provide a Go http.Handler and you can set this handler on the http.Server that you want with the options.\nThis approach makes gives the user the flexibility to serve the webhook in very customized ways like number of connections, address, paths\u0026hellip;\nTo get a Handler from a previous created Webhook you can use http.HandlerFor method.\nYou can create a single HTTP server with multiple webhooks (multiple hadlers) Context Every webhook receives and passes a context.Context. In this context is also stored the orignal admissionv1beta1.AdmissionRequest in case more information is required in a mutator or a validator, like the operation of the webhook (CREATE, UPDATE\u0026hellip;).\n"
},
{
	"uri": "https://slok.github.io/kubewebhook/getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " Getting started If it\u0026rsquo;s the first time that you are using Kubewebhook you should get familiar with the few pieces that are needed to create a webhook.\n basic concepts  Now you are ready to get stared with with Kubewebook, you can choose to start with a mutating webhook or a validating webhook, in the end both use the same approach, so it doesn\u0026rsquo;t matter.\n Mutating tutorial (TODO, check example for now) Validating tutorial (TODO, check example for now)  "
},
{
	"uri": "https://slok.github.io/kubewebhook/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " API To check the API there is already generated using godoc. Check it here\n"
},
{
	"uri": "https://slok.github.io/kubewebhook/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Testing One of the most important things is to have a reliable software. Testing will help us increasing reliability.\nAdmission webhooks are hard to test mainly because of three things:\n It\u0026rsquo;s mandatory to use TLS. Apiserver is the one that makes the calls. The servie needs to be in a cluster or available in a exposed host.  Kubewebhook is tested, this means that it\u0026rsquo;s not necessary to test the infrastructure code, you just need to test your mutators and validators logic.\nThis doesn\u0026rsquo;t mean that you could create integration tests, but integration tests should be less than unit test.\nLets make a testing example of a mutator.\nExample The example is here also\nImagine a webhook like this. It only sets labels on every pod that it receives\npackage mutatortesting import ( \u0026#34;context\u0026#34; corev1 \u0026#34;k8s.io/api/core/v1\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;github.com/slok/kubewebhook/pkg/webhook/mutating\u0026#34; ) // PodLabeler is a mutator that will set labels on the received pods. type PodLabeler struct { labels map[string]string } // NewPodLabeler returns a new PodLabeler initialized. func NewPodLabeler(labels map[string]string) mutating.Mutator { if labels == nil { labels = make(map[string]string) } return \u0026amp;PodLabeler{ labels: labels, } } // Mutate will set the required labels on the pods. Satisfies mutating.Mutator interface. func (p *PodLabeler) Mutate(ctx context.Context, obj metav1.Object) (bool, error) { pod := obj.(*corev1.Pod) if pod.Labels == nil { pod.Labels = make(map[string]string) } for k, v := range p.labels { pod.Labels[k] = v } return false, nil } You would make a test that check the business logic of the mutator itself and nothing more.\npackage mutatortesting_test import ( \u0026#34;context\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;github.com/stretchr/testify/assert\u0026#34; corev1 \u0026#34;k8s.io/api/core/v1\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;github.com/slok/kubewebhook/examples/mutatortesting\u0026#34; ) func TestPodTaggerMutate(t *testing.T) { tests := []struct { name string pod *corev1.Pod labels map[string]string expPod *corev1.Pod expErr bool }{ { name: \u0026#34;Mutating a pod without labels should set the labels correctly.\u0026#34;, pod: \u0026amp;corev1.Pod{ ObjectMeta: metav1.ObjectMeta{ Name: \u0026#34;test\u0026#34;, }, }, labels: map[string]string{\u0026#34;bruce\u0026#34;: \u0026#34;wayne\u0026#34;, \u0026#34;peter\u0026#34;: \u0026#34;parker\u0026#34;}, expPod: \u0026amp;corev1.Pod{ ObjectMeta: metav1.ObjectMeta{ Name: \u0026#34;test\u0026#34;, Labels: map[string]string{\u0026#34;bruce\u0026#34;: \u0026#34;wayne\u0026#34;, \u0026#34;peter\u0026#34;: \u0026#34;parker\u0026#34;}, }, }, }, { name: \u0026#34;Mutating a pod with labels should aggregate and replace the labels with the existing ones.\u0026#34;, pod: \u0026amp;corev1.Pod{ ObjectMeta: metav1.ObjectMeta{ Name: \u0026#34;test\u0026#34;, Labels: map[string]string{\u0026#34;bruce\u0026#34;: \u0026#34;banner\u0026#34;, \u0026#34;tony\u0026#34;: \u0026#34;stark\u0026#34;}, }, }, labels: map[string]string{\u0026#34;bruce\u0026#34;: \u0026#34;wayne\u0026#34;, \u0026#34;peter\u0026#34;: \u0026#34;parker\u0026#34;}, expPod: \u0026amp;corev1.Pod{ ObjectMeta: metav1.ObjectMeta{ Name: \u0026#34;test\u0026#34;, Labels: map[string]string{\u0026#34;bruce\u0026#34;: \u0026#34;wayne\u0026#34;, \u0026#34;peter\u0026#34;: \u0026#34;parker\u0026#34;, \u0026#34;tony\u0026#34;: \u0026#34;stark\u0026#34;}, }, }, }, } for _, test := range tests { t.Run(test.name, func(t *testing.T) { assert := assert.New(t) pl := mutatortesting.NewPodLabeler(test.labels) gotPod := test.pod _, err := pl.Mutate(context.TODO(), gotPod) if test.expErr { assert.Error(err) } else if assert.NoError(err) { // Check the expected pod. \tassert.Equal(test.expPod, gotPod) } }) } }"
},
{
	"uri": "https://slok.github.io/kubewebhook/best-practices/",
	"title": "Best practices",
	"tags": [],
	"description": "",
	"content": " Best practices When you make a Kubernetes admission webhook there are some points that are need to take into account.\nLatency The webhooks are called synchronously from the apiserver, this means that when the apiserver starts the chain of admission before storing the object. If the latency of your webhook is high it will impact on every object.\nTo reduce the latency if you need resources from the apiserver a good pattern is to use a cache that is populated using a controller that is watching resource changes and populating the cache Number of calls Webhook admissions are requested using TLS, and every webhook configuration can have multiple calls to different webhooks or endpoints. Every call has impact on the chain.\nIf multiple mutations or validations can be grouped in a single mutation chain that would reduce the latency and the number of calls.\nControllers and operators Webhooks should not be used to take other actions on a resource creation, delete or update event. If that\u0026rsquo;s the case a controller or a operator should be used instead. Admission webhooks act on the resource itself before being stored on the ETCD.\nGrouping If you have custom webhooks on your cluster, would be good to have all the webhooks on the same server and group all mutating webhooks by type.\nExample: A server that has 3 webhooks\n Pod mutating webhook Pod validating webhook Ingress validating webhook.  Each one has a chain with multiple validators and mutators. Example\n Pod mutating webhook.  Add team labels based on the namespace. Set tolerations based on the execution type. Set some stablished standard annotations. Add prometheus monitoring port.   That chain would act on one single mutating webhook call and will return all the mutations in one request.\nNamespace Sometimes the object received for mutating or validating doesn\u0026rsquo;t have the Namespace set, this is mainly because it has not been defaulted yet (AFAIK). In this case you can get the namespace from the admission request, the request is stored on the received context (in the mutators/validators). Check Kubewebhook context API docs\n"
},
{
	"uri": "https://slok.github.io/kubewebhook/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://slok.github.io/kubewebhook/",
	"title": "Kubewebhook documentation",
	"tags": [],
	"description": "",
	"content": " Kubewebhook Kubewebhook is a small Go framework to create external admission webhooks for Kubernetes.\nWith Kubewebhook you can make validating and mutating webhooks very fast and focusing mainly on the domain logic of the webhook itself.\nMain features  Ready for mutating and validating webhook kinds. Easy and testable API. Simple, extensible and flexible. Multiple webhooks on the same server.  "
},
{
	"uri": "https://slok.github.io/kubewebhook/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]